// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: airsettle/airsettle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryVerificationKeyRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryVerificationKeyRequest) Reset()         { *m = QueryVerificationKeyRequest{} }
func (m *QueryVerificationKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationKeyRequest) ProtoMessage()    {}
func (*QueryVerificationKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{2}
}
func (m *QueryVerificationKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationKeyRequest.Merge(m, src)
}
func (m *QueryVerificationKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationKeyRequest proto.InternalMessageInfo

func (m *QueryVerificationKeyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryVerificationKeyResponse struct {
	Vkey string `protobuf:"bytes,1,opt,name=vkey,proto3" json:"vkey,omitempty"`
}

func (m *QueryVerificationKeyResponse) Reset()         { *m = QueryVerificationKeyResponse{} }
func (m *QueryVerificationKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationKeyResponse) ProtoMessage()    {}
func (*QueryVerificationKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{3}
}
func (m *QueryVerificationKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationKeyResponse.Merge(m, src)
}
func (m *QueryVerificationKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationKeyResponse proto.InternalMessageInfo

func (m *QueryVerificationKeyResponse) GetVkey() string {
	if m != nil {
		return m.Vkey
	}
	return ""
}

type QueryShowExecutionLayerByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryShowExecutionLayerByAddressRequest) Reset() {
	*m = QueryShowExecutionLayerByAddressRequest{}
}
func (m *QueryShowExecutionLayerByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowExecutionLayerByAddressRequest) ProtoMessage()    {}
func (*QueryShowExecutionLayerByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{4}
}
func (m *QueryShowExecutionLayerByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowExecutionLayerByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowExecutionLayerByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowExecutionLayerByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowExecutionLayerByAddressRequest.Merge(m, src)
}
func (m *QueryShowExecutionLayerByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowExecutionLayerByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowExecutionLayerByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowExecutionLayerByAddressRequest proto.InternalMessageInfo

func (m *QueryShowExecutionLayerByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryShowExecutionLayerByAddressResponse struct {
	Exelayer *Exelayer `protobuf:"bytes,1,opt,name=exelayer,proto3" json:"exelayer,omitempty"`
}

func (m *QueryShowExecutionLayerByAddressResponse) Reset() {
	*m = QueryShowExecutionLayerByAddressResponse{}
}
func (m *QueryShowExecutionLayerByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowExecutionLayerByAddressResponse) ProtoMessage()    {}
func (*QueryShowExecutionLayerByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{5}
}
func (m *QueryShowExecutionLayerByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowExecutionLayerByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowExecutionLayerByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowExecutionLayerByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowExecutionLayerByAddressResponse.Merge(m, src)
}
func (m *QueryShowExecutionLayerByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowExecutionLayerByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowExecutionLayerByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowExecutionLayerByAddressResponse proto.InternalMessageInfo

func (m *QueryShowExecutionLayerByAddressResponse) GetExelayer() *Exelayer {
	if m != nil {
		return m.Exelayer
	}
	return nil
}

type QueryShowExecutionLayerByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryShowExecutionLayerByIdRequest) Reset()         { *m = QueryShowExecutionLayerByIdRequest{} }
func (m *QueryShowExecutionLayerByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowExecutionLayerByIdRequest) ProtoMessage()    {}
func (*QueryShowExecutionLayerByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{6}
}
func (m *QueryShowExecutionLayerByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowExecutionLayerByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowExecutionLayerByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowExecutionLayerByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowExecutionLayerByIdRequest.Merge(m, src)
}
func (m *QueryShowExecutionLayerByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowExecutionLayerByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowExecutionLayerByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowExecutionLayerByIdRequest proto.InternalMessageInfo

func (m *QueryShowExecutionLayerByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryShowExecutionLayerByIdResponse struct {
	Exelayer *Exelayer `protobuf:"bytes,1,opt,name=exelayer,proto3" json:"exelayer,omitempty"`
}

func (m *QueryShowExecutionLayerByIdResponse) Reset()         { *m = QueryShowExecutionLayerByIdResponse{} }
func (m *QueryShowExecutionLayerByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowExecutionLayerByIdResponse) ProtoMessage()    {}
func (*QueryShowExecutionLayerByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{7}
}
func (m *QueryShowExecutionLayerByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowExecutionLayerByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowExecutionLayerByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowExecutionLayerByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowExecutionLayerByIdResponse.Merge(m, src)
}
func (m *QueryShowExecutionLayerByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowExecutionLayerByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowExecutionLayerByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowExecutionLayerByIdResponse proto.InternalMessageInfo

func (m *QueryShowExecutionLayerByIdResponse) GetExelayer() *Exelayer {
	if m != nil {
		return m.Exelayer
	}
	return nil
}

type QueryListAllExecutionLayersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListAllExecutionLayersRequest) Reset()         { *m = QueryListAllExecutionLayersRequest{} }
func (m *QueryListAllExecutionLayersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListAllExecutionLayersRequest) ProtoMessage()    {}
func (*QueryListAllExecutionLayersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{8}
}
func (m *QueryListAllExecutionLayersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAllExecutionLayersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAllExecutionLayersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAllExecutionLayersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAllExecutionLayersRequest.Merge(m, src)
}
func (m *QueryListAllExecutionLayersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAllExecutionLayersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAllExecutionLayersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAllExecutionLayersRequest proto.InternalMessageInfo

func (m *QueryListAllExecutionLayersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListAllExecutionLayersResponse struct {
	Exelayer   []*Exelayer         `protobuf:"bytes,1,rep,name=exelayer,proto3" json:"exelayer,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListAllExecutionLayersResponse) Reset()         { *m = QueryListAllExecutionLayersResponse{} }
func (m *QueryListAllExecutionLayersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListAllExecutionLayersResponse) ProtoMessage()    {}
func (*QueryListAllExecutionLayersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{9}
}
func (m *QueryListAllExecutionLayersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAllExecutionLayersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAllExecutionLayersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAllExecutionLayersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAllExecutionLayersResponse.Merge(m, src)
}
func (m *QueryListAllExecutionLayersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAllExecutionLayersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAllExecutionLayersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAllExecutionLayersResponse proto.InternalMessageInfo

func (m *QueryListAllExecutionLayersResponse) GetExelayer() []*Exelayer {
	if m != nil {
		return m.Exelayer
	}
	return nil
}

func (m *QueryListAllExecutionLayersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBatchRequest struct {
	BatchNumber uint64 `protobuf:"varint,1,opt,name=batchNumber,proto3" json:"batchNumber,omitempty"`
	ChainId     string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *QueryGetBatchRequest) Reset()         { *m = QueryGetBatchRequest{} }
func (m *QueryGetBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBatchRequest) ProtoMessage()    {}
func (*QueryGetBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{10}
}
func (m *QueryGetBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBatchRequest.Merge(m, src)
}
func (m *QueryGetBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBatchRequest proto.InternalMessageInfo

func (m *QueryGetBatchRequest) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *QueryGetBatchRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryGetBatchResponse struct {
	Batch *BatchMax `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *QueryGetBatchResponse) Reset()         { *m = QueryGetBatchResponse{} }
func (m *QueryGetBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBatchResponse) ProtoMessage()    {}
func (*QueryGetBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{11}
}
func (m *QueryGetBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBatchResponse.Merge(m, src)
}
func (m *QueryGetBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBatchResponse proto.InternalMessageInfo

func (m *QueryGetBatchResponse) GetBatch() *BatchMax {
	if m != nil {
		return m.Batch
	}
	return nil
}

type QueryListPollsRequest struct {
	ChainId    string             `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListPollsRequest) Reset()         { *m = QueryListPollsRequest{} }
func (m *QueryListPollsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListPollsRequest) ProtoMessage()    {}
func (*QueryListPollsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{12}
}
func (m *QueryListPollsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPollsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPollsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPollsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPollsRequest.Merge(m, src)
}
func (m *QueryListPollsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPollsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPollsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPollsRequest proto.InternalMessageInfo

func (m *QueryListPollsRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryListPollsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListPollsResponse struct {
	Poll       []*Poll             `protobuf:"bytes,1,rep,name=poll,proto3" json:"poll,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListPollsResponse) Reset()         { *m = QueryListPollsResponse{} }
func (m *QueryListPollsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListPollsResponse) ProtoMessage()    {}
func (*QueryListPollsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{13}
}
func (m *QueryListPollsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPollsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPollsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPollsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPollsResponse.Merge(m, src)
}
func (m *QueryListPollsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPollsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPollsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPollsResponse proto.InternalMessageInfo

func (m *QueryListPollsResponse) GetPoll() []*Poll {
	if m != nil {
		return m.Poll
	}
	return nil
}

func (m *QueryListPollsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPollRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	PollId  string `protobuf:"bytes,2,opt,name=pollId,proto3" json:"pollId,omitempty"`
}

func (m *QueryGetPollRequest) Reset()         { *m = QueryGetPollRequest{} }
func (m *QueryGetPollRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPollRequest) ProtoMessage()    {}
func (*QueryGetPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{14}
}
func (m *QueryGetPollRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPollRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPollRequest.Merge(m, src)
}
func (m *QueryGetPollRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPollRequest proto.InternalMessageInfo

func (m *QueryGetPollRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryGetPollRequest) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

type QueryGetPollResponse struct {
	Poll *Poll `protobuf:"bytes,1,opt,name=poll,proto3" json:"poll,omitempty"`
}

func (m *QueryGetPollResponse) Reset()         { *m = QueryGetPollResponse{} }
func (m *QueryGetPollResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPollResponse) ProtoMessage()    {}
func (*QueryGetPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{15}
}
func (m *QueryGetPollResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPollResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPollResponse.Merge(m, src)
}
func (m *QueryGetPollResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPollResponse proto.InternalMessageInfo

func (m *QueryGetPollResponse) GetPoll() *Poll {
	if m != nil {
		return m.Poll
	}
	return nil
}

type QueryQVerifyBatchRequest struct {
	BatchNumber    uint64 `protobuf:"varint,1,opt,name=batchNumber,proto3" json:"batchNumber,omitempty"`
	ChainId        string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	MerkleRootHash string `protobuf:"bytes,3,opt,name=merkleRootHash,proto3" json:"merkleRootHash,omitempty"`
	PrevMerkleRoot string `protobuf:"bytes,4,opt,name=prevMerkleRoot,proto3" json:"prevMerkleRoot,omitempty"`
	ZkProof        string `protobuf:"bytes,5,opt,name=zkProof,proto3" json:"zkProof,omitempty"`
}

func (m *QueryQVerifyBatchRequest) Reset()         { *m = QueryQVerifyBatchRequest{} }
func (m *QueryQVerifyBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQVerifyBatchRequest) ProtoMessage()    {}
func (*QueryQVerifyBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{16}
}
func (m *QueryQVerifyBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVerifyBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVerifyBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVerifyBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVerifyBatchRequest.Merge(m, src)
}
func (m *QueryQVerifyBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVerifyBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVerifyBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVerifyBatchRequest proto.InternalMessageInfo

func (m *QueryQVerifyBatchRequest) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *QueryQVerifyBatchRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryQVerifyBatchRequest) GetMerkleRootHash() string {
	if m != nil {
		return m.MerkleRootHash
	}
	return ""
}

func (m *QueryQVerifyBatchRequest) GetPrevMerkleRoot() string {
	if m != nil {
		return m.PrevMerkleRoot
	}
	return ""
}

func (m *QueryQVerifyBatchRequest) GetZkProof() string {
	if m != nil {
		return m.ZkProof
	}
	return ""
}

type QueryQVerifyBatchResponse struct {
	Verified bool `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (m *QueryQVerifyBatchResponse) Reset()         { *m = QueryQVerifyBatchResponse{} }
func (m *QueryQVerifyBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQVerifyBatchResponse) ProtoMessage()    {}
func (*QueryQVerifyBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{17}
}
func (m *QueryQVerifyBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQVerifyBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQVerifyBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQVerifyBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQVerifyBatchResponse.Merge(m, src)
}
func (m *QueryQVerifyBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQVerifyBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQVerifyBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQVerifyBatchResponse proto.InternalMessageInfo

func (m *QueryQVerifyBatchResponse) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "airsettle.airsettle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "airsettle.airsettle.QueryParamsResponse")
	proto.RegisterType((*QueryVerificationKeyRequest)(nil), "airsettle.airsettle.QueryVerificationKeyRequest")
	proto.RegisterType((*QueryVerificationKeyResponse)(nil), "airsettle.airsettle.QueryVerificationKeyResponse")
	proto.RegisterType((*QueryShowExecutionLayerByAddressRequest)(nil), "airsettle.airsettle.QueryShowExecutionLayerByAddressRequest")
	proto.RegisterType((*QueryShowExecutionLayerByAddressResponse)(nil), "airsettle.airsettle.QueryShowExecutionLayerByAddressResponse")
	proto.RegisterType((*QueryShowExecutionLayerByIdRequest)(nil), "airsettle.airsettle.QueryShowExecutionLayerByIdRequest")
	proto.RegisterType((*QueryShowExecutionLayerByIdResponse)(nil), "airsettle.airsettle.QueryShowExecutionLayerByIdResponse")
	proto.RegisterType((*QueryListAllExecutionLayersRequest)(nil), "airsettle.airsettle.QueryListAllExecutionLayersRequest")
	proto.RegisterType((*QueryListAllExecutionLayersResponse)(nil), "airsettle.airsettle.QueryListAllExecutionLayersResponse")
	proto.RegisterType((*QueryGetBatchRequest)(nil), "airsettle.airsettle.QueryGetBatchRequest")
	proto.RegisterType((*QueryGetBatchResponse)(nil), "airsettle.airsettle.QueryGetBatchResponse")
	proto.RegisterType((*QueryListPollsRequest)(nil), "airsettle.airsettle.QueryListPollsRequest")
	proto.RegisterType((*QueryListPollsResponse)(nil), "airsettle.airsettle.QueryListPollsResponse")
	proto.RegisterType((*QueryGetPollRequest)(nil), "airsettle.airsettle.QueryGetPollRequest")
	proto.RegisterType((*QueryGetPollResponse)(nil), "airsettle.airsettle.QueryGetPollResponse")
	proto.RegisterType((*QueryQVerifyBatchRequest)(nil), "airsettle.airsettle.QueryQVerifyBatchRequest")
	proto.RegisterType((*QueryQVerifyBatchResponse)(nil), "airsettle.airsettle.QueryQVerifyBatchResponse")
}

func init() { proto.RegisterFile("airsettle/airsettle/query.proto", fileDescriptor_b31ee1de514885b3) }

var fileDescriptor_b31ee1de514885b3 = []byte{
	// 1084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdf, 0x6f, 0xdb, 0x54,
	0x14, 0xee, 0xcd, 0xd2, 0xae, 0x3d, 0x43, 0x45, 0xba, 0x2b, 0x55, 0xe6, 0x8e, 0xac, 0xf2, 0xa4,
	0xb5, 0x2b, 0x8a, 0x4d, 0x3b, 0xd0, 0x86, 0xd8, 0x10, 0xcb, 0xd6, 0xb5, 0x1b, 0xdd, 0x94, 0x19,
	0x09, 0x21, 0x5e, 0x82, 0x93, 0xdc, 0x25, 0x56, 0x9c, 0xdc, 0xd4, 0x76, 0xd2, 0x98, 0x28, 0x0f,
	0xf0, 0xca, 0xcb, 0x04, 0x7f, 0xc5, 0x78, 0xe5, 0x95, 0x07, 0x1e, 0xf7, 0x38, 0x09, 0x21, 0x21,
	0x21, 0x21, 0xd4, 0xf2, 0x0f, 0x20, 0xf1, 0x07, 0x20, 0x5f, 0x1f, 0xbb, 0x4e, 0xe6, 0x38, 0xce,
	0xb6, 0xb7, 0xeb, 0x9b, 0xf3, 0xe3, 0xfb, 0xbe, 0x7b, 0xef, 0xf9, 0x14, 0xb8, 0xa4, 0x1b, 0x96,
	0xcd, 0x1c, 0xc7, 0x64, 0xea, 0xe9, 0xea, 0xb0, 0xcb, 0x2c, 0x57, 0xe9, 0x58, 0xdc, 0xe1, 0xf4,
	0x7c, 0xb8, 0xad, 0x84, 0x2b, 0x69, 0xa5, 0xce, 0xeb, 0x5c, 0xfc, 0xae, 0x7a, 0x2b, 0x3f, 0x54,
	0xba, 0x58, 0xe7, 0xbc, 0xee, 0x15, 0xea, 0x18, 0xaa, 0xde, 0x6e, 0x73, 0x47, 0x77, 0x0c, 0xde,
	0xb6, 0xf1, 0xd7, 0xad, 0x2a, 0xb7, 0x5b, 0xdc, 0x56, 0x2b, 0xba, 0x8d, 0x1d, 0xd4, 0xde, 0x76,
	0x85, 0x39, 0xfa, 0xb6, 0xda, 0xd1, 0xeb, 0x46, 0x5b, 0x04, 0x63, 0xec, 0x7a, 0x1c, 0xaa, 0x8e,
	0x6e, 0xe9, 0xad, 0xa0, 0x9a, 0x1c, 0x17, 0xc1, 0xfa, 0xcc, 0xd4, 0x5d, 0x66, 0x61, 0xcc, 0xe5,
	0xb8, 0x98, 0x8a, 0xee, 0x54, 0x1b, 0xe5, 0x96, 0xde, 0xc7, 0xa0, 0x7c, 0x6c, 0x2b, 0x6e, 0x9a,
	0xfe, 0xef, 0xf2, 0x0a, 0xd0, 0xc7, 0x1e, 0xd8, 0x92, 0xe8, 0xae, 0xb1, 0xc3, 0x2e, 0xb3, 0x1d,
	0xb9, 0x04, 0xe7, 0x47, 0x76, 0xed, 0x0e, 0x6f, 0xdb, 0x8c, 0x7e, 0x04, 0x0b, 0x3e, 0xca, 0x1c,
	0x59, 0x27, 0x9b, 0xe7, 0x76, 0xd6, 0x94, 0x18, 0xf5, 0x14, 0x3f, 0xa9, 0x98, 0x7d, 0xfe, 0xd7,
	0xa5, 0x39, 0x0d, 0x13, 0xe4, 0x02, 0xac, 0x89, 0x8a, 0x5f, 0x30, 0xcb, 0x78, 0x62, 0x54, 0x85,
	0x1a, 0x9f, 0x31, 0x17, 0x1b, 0xd2, 0x65, 0xc8, 0x18, 0x35, 0x51, 0x75, 0x49, 0xcb, 0x18, 0x35,
	0x79, 0x07, 0x2e, 0xc6, 0x87, 0x23, 0x12, 0x0a, 0xd9, 0x5e, 0x93, 0xb9, 0x98, 0x21, 0xd6, 0xf2,
	0x1d, 0xd8, 0x10, 0x39, 0x9f, 0x37, 0xf8, 0xd1, 0x6e, 0x9f, 0x55, 0xbb, 0x5e, 0xd2, 0x81, 0x27,
	0x58, 0xd1, 0xbd, 0x5d, 0xab, 0x59, 0xcc, 0x0e, 0xf8, 0xd1, 0x1c, 0x9c, 0xd5, 0xfd, 0x1d, 0xac,
	0x10, 0x7c, 0xca, 0x0c, 0x36, 0xa7, 0x17, 0x09, 0xe5, 0x58, 0x0c, 0x8e, 0x04, 0x05, 0x79, 0x37,
	0x56, 0x90, 0x5d, 0x0c, 0xd2, 0xc2, 0x70, 0xf9, 0x03, 0x90, 0x27, 0xb6, 0xb9, 0x5f, 0x9b, 0xa4,
	0xca, 0xd7, 0x70, 0x39, 0x31, 0xeb, 0xf5, 0x71, 0x99, 0x88, 0xeb, 0xc0, 0xb0, 0x9d, 0xdb, 0xa6,
	0x39, 0xda, 0x24, 0x94, 0xef, 0x1e, 0xc0, 0xe9, 0x9d, 0xc6, 0x16, 0x57, 0x14, 0xff, 0x01, 0x28,
	0xde, 0x03, 0x50, 0xfc, 0x27, 0x86, 0x0f, 0x40, 0x29, 0xe9, 0x75, 0x86, 0xb9, 0x5a, 0x24, 0x53,
	0x7e, 0x46, 0x90, 0xd0, 0xa4, 0x76, 0xb1, 0x84, 0xce, 0xcc, 0x40, 0x88, 0xee, 0x8d, 0x40, 0xcd,
	0x08, 0xa8, 0x1b, 0x53, 0xa1, 0xfa, 0x7d, 0x47, 0xb0, 0x6a, 0xb0, 0x22, 0xa0, 0xee, 0x31, 0xa7,
	0xe8, 0xbd, 0xb1, 0x40, 0x8b, 0x75, 0x38, 0x27, 0xde, 0xdc, 0xa3, 0x6e, 0xab, 0x82, 0x7a, 0x67,
	0xb5, 0xe8, 0x96, 0x77, 0xd9, 0xaa, 0x0d, 0xdd, 0x68, 0xdf, 0xaf, 0x89, 0xfe, 0x4b, 0x5a, 0xf0,
	0x29, 0x1f, 0xc0, 0x3b, 0x63, 0x35, 0x91, 0xf0, 0x35, 0x98, 0x17, 0x15, 0x12, 0x8f, 0x4f, 0xa4,
	0x3c, 0xd4, 0xfb, 0x9a, 0x1f, 0x2b, 0xbb, 0x58, 0xcd, 0x13, 0xb3, 0xc4, 0x4d, 0x33, 0x7a, 0xdb,
	0x03, 0x00, 0x64, 0x04, 0xc0, 0xd8, 0x41, 0x66, 0x5e, 0xf9, 0x20, 0x9f, 0x12, 0x58, 0x1d, 0xef,
	0x8d, 0x54, 0x0a, 0x90, 0xf5, 0xc6, 0x0d, 0x9e, 0xdb, 0x85, 0xf8, 0x89, 0xc1, 0x4d, 0x53, 0x13,
	0x61, 0x6f, 0xee, 0xbc, 0xf6, 0x70, 0x84, 0xed, 0x31, 0x01, 0x68, 0xba, 0x16, 0xab, 0xb0, 0xe0,
	0x21, 0x08, 0x4f, 0x09, 0xbf, 0xe4, 0xdd, 0xd3, 0x83, 0xf7, 0x0b, 0xbd, 0x44, 0x8c, 0xa4, 0x20,
	0x26, 0xff, 0x4a, 0x20, 0x27, 0xea, 0x3c, 0x16, 0x33, 0xcd, 0x7d, 0x53, 0x97, 0x88, 0x5e, 0x81,
	0xe5, 0x16, 0xb3, 0x9a, 0x26, 0xd3, 0x38, 0x77, 0xf6, 0x75, 0xbb, 0x91, 0x3b, 0x23, 0x02, 0xc6,
	0x76, 0xbd, 0xb8, 0x8e, 0xc5, 0x7a, 0x0f, 0xc3, 0xdd, 0x5c, 0xd6, 0x8f, 0x1b, 0xdd, 0xf5, 0x3a,
	0x7d, 0xd3, 0x2c, 0x59, 0x9c, 0x3f, 0xc9, 0xcd, 0xfb, 0x9d, 0xf0, 0x53, 0xbe, 0x0e, 0x17, 0x62,
	0x18, 0xa0, 0x1c, 0x12, 0x2c, 0xf6, 0xc4, 0xb0, 0x66, 0xbe, 0xb2, 0x8b, 0x5a, 0xf8, 0xbd, 0xf3,
	0xfd, 0x32, 0xcc, 0x8b, 0x4c, 0xfa, 0x03, 0x81, 0x05, 0xdf, 0x1f, 0xe8, 0x46, 0xac, 0x62, 0x2f,
	0x9b, 0x91, 0xb4, 0x39, 0x3d, 0xd0, 0xc7, 0x20, 0x7f, 0xf8, 0xdd, 0x6f, 0xff, 0xfc, 0x98, 0x51,
	0x69, 0xc1, 0xf3, 0x3a, 0xa1, 0x8f, 0x5d, 0x68, 0x33, 0xe7, 0x88, 0x5b, 0x4d, 0x75, 0xb2, 0xe5,
	0xd2, 0x5f, 0x08, 0xbc, 0x3d, 0x66, 0x34, 0xf4, 0xfd, 0xc9, 0x4d, 0xe3, 0x2d, 0x4c, 0xda, 0x9e,
	0x21, 0x03, 0xf1, 0xde, 0x15, 0x78, 0x3f, 0xa1, 0x37, 0x53, 0xe2, 0xed, 0x45, 0xea, 0x94, 0x9b,
	0xcc, 0x55, 0x07, 0x46, 0x6d, 0x48, 0xff, 0x23, 0xb0, 0x96, 0x60, 0x57, 0xf4, 0xe6, 0x64, 0x60,
	0xd3, 0xad, 0x52, 0xba, 0xf5, 0x8a, 0xd9, 0x48, 0xf1, 0x4b, 0x41, 0x51, 0xa3, 0xa5, 0x94, 0x14,
	0xed, 0x06, 0x3f, 0x2a, 0xb3, 0xa0, 0x68, 0x59, 0x0c, 0xf1, 0x72, 0xc5, 0x2d, 0xa3, 0x3f, 0xab,
	0x03, 0x5c, 0x0c, 0xe9, 0x9f, 0x04, 0x56, 0xe3, 0x8d, 0x90, 0x5e, 0x9f, 0x0d, 0x73, 0x68, 0xb8,
	0xd2, 0x8d, 0xd9, 0x13, 0x91, 0xe7, 0x23, 0xc1, 0x73, 0x9f, 0xde, 0x7b, 0x4d, 0x9e, 0x46, 0xcd,
	0x3f, 0xd4, 0xdf, 0x09, 0xac, 0xc6, 0xbb, 0x62, 0x12, 0xbb, 0x44, 0xdb, 0x4e, 0x62, 0x97, 0x6c,
	0xc0, 0xf2, 0xbe, 0x60, 0x57, 0xa4, 0x9f, 0xa6, 0x64, 0x67, 0x1a, 0xb6, 0x53, 0xd6, 0x4d, 0x73,
	0x9c, 0xa1, 0x4d, 0x7f, 0x26, 0xb0, 0x18, 0xd8, 0x1d, 0xbd, 0x3a, 0x19, 0xd0, 0x98, 0xcd, 0x4a,
	0x5b, 0x69, 0x42, 0x11, 0x6d, 0x49, 0xa0, 0x7d, 0x40, 0xf7, 0x53, 0xa2, 0xad, 0x33, 0xa7, 0x2c,
	0x66, 0xad, 0x3a, 0x88, 0x8c, 0xdc, 0xa1, 0x3a, 0xc0, 0x11, 0x3b, 0xa4, 0xcf, 0x08, 0x2c, 0x85,
	0xd6, 0x46, 0xb7, 0x92, 0x75, 0x8c, 0x7a, 0xaf, 0xf4, 0x5e, 0xaa, 0x58, 0x04, 0x7e, 0x47, 0x00,
	0xbf, 0x45, 0x3f, 0x9e, 0x45, 0x66, 0xcf, 0x5d, 0xec, 0x08, 0xd6, 0x9f, 0x08, 0x9c, 0x45, 0xaf,
	0xa2, 0x9b, 0x89, 0xaa, 0x45, 0x7c, 0x51, 0xba, 0x9a, 0x22, 0x12, 0x51, 0x3e, 0x10, 0x28, 0xef,
	0xd2, 0xe2, 0x0c, 0xf2, 0x7a, 0x20, 0x4f, 0x31, 0xaa, 0x03, 0xdf, 0x5b, 0x87, 0xf4, 0x5f, 0x02,
	0x6f, 0x45, 0xed, 0x84, 0x16, 0x26, 0xe3, 0x88, 0x31, 0x4e, 0x49, 0x49, 0x1b, 0x8e, 0xd8, 0xbf,
	0x25, 0x02, 0xfc, 0x80, 0xba, 0x29, 0xc1, 0x1f, 0x96, 0xc5, 0xd0, 0x75, 0x93, 0x2f, 0x88, 0x3a,
	0x18, 0x35, 0x5b, 0x8f, 0xe1, 0x88, 0xab, 0x0e, 0xd5, 0x01, 0xba, 0xe8, 0xb0, 0xa8, 0x3d, 0x3f,
	0xce, 0x93, 0x17, 0xc7, 0x79, 0xf2, 0xf7, 0x71, 0x9e, 0x3c, 0x3d, 0xc9, 0xcf, 0xbd, 0x38, 0xc9,
	0xcf, 0xfd, 0x71, 0x92, 0x9f, 0xfb, 0xea, 0x46, 0xdd, 0x70, 0x1a, 0xdd, 0x8a, 0x52, 0xe5, 0xad,
	0x44, 0x78, 0xfd, 0xc8, 0xda, 0x71, 0x3b, 0xcc, 0xae, 0x2c, 0x88, 0x7f, 0x73, 0xd7, 0xfe, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0xd9, 0x9b, 0xd6, 0x73, 0xf0, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of VerificationKey items.
	VerificationKey(ctx context.Context, in *QueryVerificationKeyRequest, opts ...grpc.CallOption) (*QueryVerificationKeyResponse, error)
	// Queries a list of ShowExecutionLayerByAddress items.
	ShowExecutionLayerByAddress(ctx context.Context, in *QueryShowExecutionLayerByAddressRequest, opts ...grpc.CallOption) (*QueryShowExecutionLayerByAddressResponse, error)
	// Queries a list of ShowExecutionLayerById items.
	ShowExecutionLayerById(ctx context.Context, in *QueryShowExecutionLayerByIdRequest, opts ...grpc.CallOption) (*QueryShowExecutionLayerByIdResponse, error)
	// Queries a list of ListAllExecutionLayers items.
	ListAllExecutionLayers(ctx context.Context, in *QueryListAllExecutionLayersRequest, opts ...grpc.CallOption) (*QueryListAllExecutionLayersResponse, error)
	// Queries a list of GetBatch items.
	GetBatch(ctx context.Context, in *QueryGetBatchRequest, opts ...grpc.CallOption) (*QueryGetBatchResponse, error)
	// Queries a list of ListPolls items.
	ListPolls(ctx context.Context, in *QueryListPollsRequest, opts ...grpc.CallOption) (*QueryListPollsResponse, error)
	// Queries a list of GetPoll items.
	GetPoll(ctx context.Context, in *QueryGetPollRequest, opts ...grpc.CallOption) (*QueryGetPollResponse, error)
	// Queries a list of QVerifyBatch items.
	QVerifyBatch(ctx context.Context, in *QueryQVerifyBatchRequest, opts ...grpc.CallOption) (*QueryQVerifyBatchResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerificationKey(ctx context.Context, in *QueryVerificationKeyRequest, opts ...grpc.CallOption) (*QueryVerificationKeyResponse, error) {
	out := new(QueryVerificationKeyResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/VerificationKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowExecutionLayerByAddress(ctx context.Context, in *QueryShowExecutionLayerByAddressRequest, opts ...grpc.CallOption) (*QueryShowExecutionLayerByAddressResponse, error) {
	out := new(QueryShowExecutionLayerByAddressResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/ShowExecutionLayerByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowExecutionLayerById(ctx context.Context, in *QueryShowExecutionLayerByIdRequest, opts ...grpc.CallOption) (*QueryShowExecutionLayerByIdResponse, error) {
	out := new(QueryShowExecutionLayerByIdResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/ShowExecutionLayerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAllExecutionLayers(ctx context.Context, in *QueryListAllExecutionLayersRequest, opts ...grpc.CallOption) (*QueryListAllExecutionLayersResponse, error) {
	out := new(QueryListAllExecutionLayersResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/ListAllExecutionLayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBatch(ctx context.Context, in *QueryGetBatchRequest, opts ...grpc.CallOption) (*QueryGetBatchResponse, error) {
	out := new(QueryGetBatchResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/GetBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPolls(ctx context.Context, in *QueryListPollsRequest, opts ...grpc.CallOption) (*QueryListPollsResponse, error) {
	out := new(QueryListPollsResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/ListPolls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPoll(ctx context.Context, in *QueryGetPollRequest, opts ...grpc.CallOption) (*QueryGetPollResponse, error) {
	out := new(QueryGetPollResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/GetPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QVerifyBatch(ctx context.Context, in *QueryQVerifyBatchRequest, opts ...grpc.CallOption) (*QueryQVerifyBatchResponse, error) {
	out := new(QueryQVerifyBatchResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/QVerifyBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of VerificationKey items.
	VerificationKey(context.Context, *QueryVerificationKeyRequest) (*QueryVerificationKeyResponse, error)
	// Queries a list of ShowExecutionLayerByAddress items.
	ShowExecutionLayerByAddress(context.Context, *QueryShowExecutionLayerByAddressRequest) (*QueryShowExecutionLayerByAddressResponse, error)
	// Queries a list of ShowExecutionLayerById items.
	ShowExecutionLayerById(context.Context, *QueryShowExecutionLayerByIdRequest) (*QueryShowExecutionLayerByIdResponse, error)
	// Queries a list of ListAllExecutionLayers items.
	ListAllExecutionLayers(context.Context, *QueryListAllExecutionLayersRequest) (*QueryListAllExecutionLayersResponse, error)
	// Queries a list of GetBatch items.
	GetBatch(context.Context, *QueryGetBatchRequest) (*QueryGetBatchResponse, error)
	// Queries a list of ListPolls items.
	ListPolls(context.Context, *QueryListPollsRequest) (*QueryListPollsResponse, error)
	// Queries a list of GetPoll items.
	GetPoll(context.Context, *QueryGetPollRequest) (*QueryGetPollResponse, error)
	// Queries a list of QVerifyBatch items.
	QVerifyBatch(context.Context, *QueryQVerifyBatchRequest) (*QueryQVerifyBatchResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) VerificationKey(ctx context.Context, req *QueryVerificationKeyRequest) (*QueryVerificationKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationKey not implemented")
}
func (*UnimplementedQueryServer) ShowExecutionLayerByAddress(ctx context.Context, req *QueryShowExecutionLayerByAddressRequest) (*QueryShowExecutionLayerByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowExecutionLayerByAddress not implemented")
}
func (*UnimplementedQueryServer) ShowExecutionLayerById(ctx context.Context, req *QueryShowExecutionLayerByIdRequest) (*QueryShowExecutionLayerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowExecutionLayerById not implemented")
}
func (*UnimplementedQueryServer) ListAllExecutionLayers(ctx context.Context, req *QueryListAllExecutionLayersRequest) (*QueryListAllExecutionLayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllExecutionLayers not implemented")
}
func (*UnimplementedQueryServer) GetBatch(ctx context.Context, req *QueryGetBatchRequest) (*QueryGetBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (*UnimplementedQueryServer) ListPolls(ctx context.Context, req *QueryListPollsRequest) (*QueryListPollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolls not implemented")
}
func (*UnimplementedQueryServer) GetPoll(ctx context.Context, req *QueryGetPollRequest) (*QueryGetPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoll not implemented")
}
func (*UnimplementedQueryServer) QVerifyBatch(ctx context.Context, req *QueryQVerifyBatchRequest) (*QueryQVerifyBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QVerifyBatch not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerificationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerificationKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerificationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/VerificationKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerificationKey(ctx, req.(*QueryVerificationKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowExecutionLayerByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowExecutionLayerByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowExecutionLayerByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/ShowExecutionLayerByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowExecutionLayerByAddress(ctx, req.(*QueryShowExecutionLayerByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowExecutionLayerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowExecutionLayerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowExecutionLayerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/ShowExecutionLayerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowExecutionLayerById(ctx, req.(*QueryShowExecutionLayerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAllExecutionLayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAllExecutionLayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAllExecutionLayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/ListAllExecutionLayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAllExecutionLayers(ctx, req.(*QueryListAllExecutionLayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/GetBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBatch(ctx, req.(*QueryGetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListPollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/ListPolls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPolls(ctx, req.(*QueryListPollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/GetPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPoll(ctx, req.(*QueryGetPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QVerifyBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQVerifyBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QVerifyBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/QVerifyBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QVerifyBatch(ctx, req.(*QueryQVerifyBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airsettle.airsettle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "VerificationKey",
			Handler:    _Query_VerificationKey_Handler,
		},
		{
			MethodName: "ShowExecutionLayerByAddress",
			Handler:    _Query_ShowExecutionLayerByAddress_Handler,
		},
		{
			MethodName: "ShowExecutionLayerById",
			Handler:    _Query_ShowExecutionLayerById_Handler,
		},
		{
			MethodName: "ListAllExecutionLayers",
			Handler:    _Query_ListAllExecutionLayers_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _Query_GetBatch_Handler,
		},
		{
			MethodName: "ListPolls",
			Handler:    _Query_ListPolls_Handler,
		},
		{
			MethodName: "GetPoll",
			Handler:    _Query_GetPoll_Handler,
		},
		{
			MethodName: "QVerifyBatch",
			Handler:    _Query_QVerifyBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airsettle/airsettle/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVerificationKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vkey) > 0 {
		i -= len(m.Vkey)
		copy(dAtA[i:], m.Vkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Vkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowExecutionLayerByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowExecutionLayerByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowExecutionLayerByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowExecutionLayerByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowExecutionLayerByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowExecutionLayerByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exelayer != nil {
		{
			size, err := m.Exelayer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowExecutionLayerByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowExecutionLayerByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowExecutionLayerByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowExecutionLayerByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowExecutionLayerByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowExecutionLayerByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exelayer != nil {
		{
			size, err := m.Exelayer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAllExecutionLayersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAllExecutionLayersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAllExecutionLayersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAllExecutionLayersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAllExecutionLayersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAllExecutionLayersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Exelayer) > 0 {
		for iNdEx := len(m.Exelayer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exelayer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.BatchNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPollsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPollsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPollsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPollsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPollsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPollsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Poll) > 0 {
		for iNdEx := len(m.Poll) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Poll[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPollRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPollRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPollRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PollId) > 0 {
		i -= len(m.PollId)
		copy(dAtA[i:], m.PollId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PollId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPollResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPollResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPollResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Poll != nil {
		{
			size, err := m.Poll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQVerifyBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVerifyBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVerifyBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZkProof) > 0 {
		i -= len(m.ZkProof)
		copy(dAtA[i:], m.ZkProof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ZkProof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PrevMerkleRoot) > 0 {
		i -= len(m.PrevMerkleRoot)
		copy(dAtA[i:], m.PrevMerkleRoot)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PrevMerkleRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MerkleRootHash) > 0 {
		i -= len(m.MerkleRootHash)
		copy(dAtA[i:], m.MerkleRootHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MerkleRootHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.BatchNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQVerifyBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQVerifyBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQVerifyBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVerificationKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowExecutionLayerByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowExecutionLayerByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exelayer != nil {
		l = m.Exelayer.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowExecutionLayerByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowExecutionLayerByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exelayer != nil {
		l = m.Exelayer.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListAllExecutionLayersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListAllExecutionLayersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Exelayer) > 0 {
		for _, e := range m.Exelayer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovQuery(uint64(m.BatchNumber))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListPollsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListPollsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Poll) > 0 {
		for _, e := range m.Poll {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPollRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PollId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPollResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Poll != nil {
		l = m.Poll.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQVerifyBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovQuery(uint64(m.BatchNumber))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MerkleRootHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PrevMerkleRoot)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ZkProof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQVerifyBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Verified {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowExecutionLayerByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowExecutionLayerByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowExecutionLayerByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowExecutionLayerByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowExecutionLayerByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowExecutionLayerByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exelayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exelayer == nil {
				m.Exelayer = &Exelayer{}
			}
			if err := m.Exelayer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowExecutionLayerByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowExecutionLayerByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowExecutionLayerByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowExecutionLayerByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowExecutionLayerByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowExecutionLayerByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exelayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exelayer == nil {
				m.Exelayer = &Exelayer{}
			}
			if err := m.Exelayer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAllExecutionLayersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAllExecutionLayersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAllExecutionLayersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAllExecutionLayersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAllExecutionLayersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAllExecutionLayersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exelayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exelayer = append(m.Exelayer, &Exelayer{})
			if err := m.Exelayer[len(m.Exelayer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &BatchMax{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPollsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPollsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPollsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPollsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPollsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPollsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poll = append(m.Poll, &Poll{})
			if err := m.Poll[len(m.Poll)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPollRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPollRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPollRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPollResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPollResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPollResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Poll == nil {
				m.Poll = &Poll{}
			}
			if err := m.Poll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVerifyBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVerifyBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVerifyBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevMerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevMerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkProof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZkProof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQVerifyBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQVerifyBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQVerifyBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
