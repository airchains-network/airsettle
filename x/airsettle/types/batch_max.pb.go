// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: airsettle/airsettle/batch_max.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BatchMax struct {
	BatchNumber        uint64 `protobuf:"varint,1,opt,name=batchNumber,proto3" json:"batchNumber,omitempty"`
	ChainId            string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	PrevMerkleRootHash string `protobuf:"bytes,3,opt,name=prevMerkleRootHash,proto3" json:"prevMerkleRootHash,omitempty"`
	MerkleRootHash     string `protobuf:"bytes,4,opt,name=merkleRootHash,proto3" json:"merkleRootHash,omitempty"`
	ZkProof            string `protobuf:"bytes,5,opt,name=zkProof,proto3" json:"zkProof,omitempty"`
	Witness            string `protobuf:"bytes,6,opt,name=witness,proto3" json:"witness,omitempty"`
	Verified           string `protobuf:"bytes,7,opt,name=verified,proto3" json:"verified,omitempty"`
	BatchSubmitter     string `protobuf:"bytes,8,opt,name=batchSubmitter,proto3" json:"batchSubmitter,omitempty"`
	BatchVerifier      string `protobuf:"bytes,9,opt,name=batchVerifier,proto3" json:"batchVerifier,omitempty"`
}

func (m *BatchMax) Reset()         { *m = BatchMax{} }
func (m *BatchMax) String() string { return proto.CompactTextString(m) }
func (*BatchMax) ProtoMessage()    {}
func (*BatchMax) Descriptor() ([]byte, []int) {
	return fileDescriptor_48892b9c04061d64, []int{0}
}
func (m *BatchMax) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchMax) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchMax.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchMax) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchMax.Merge(m, src)
}
func (m *BatchMax) XXX_Size() int {
	return m.Size()
}
func (m *BatchMax) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchMax.DiscardUnknown(m)
}

var xxx_messageInfo_BatchMax proto.InternalMessageInfo

func (m *BatchMax) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *BatchMax) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *BatchMax) GetPrevMerkleRootHash() string {
	if m != nil {
		return m.PrevMerkleRootHash
	}
	return ""
}

func (m *BatchMax) GetMerkleRootHash() string {
	if m != nil {
		return m.MerkleRootHash
	}
	return ""
}

func (m *BatchMax) GetZkProof() string {
	if m != nil {
		return m.ZkProof
	}
	return ""
}

func (m *BatchMax) GetWitness() string {
	if m != nil {
		return m.Witness
	}
	return ""
}

func (m *BatchMax) GetVerified() string {
	if m != nil {
		return m.Verified
	}
	return ""
}

func (m *BatchMax) GetBatchSubmitter() string {
	if m != nil {
		return m.BatchSubmitter
	}
	return ""
}

func (m *BatchMax) GetBatchVerifier() string {
	if m != nil {
		return m.BatchVerifier
	}
	return ""
}

func init() {
	proto.RegisterType((*BatchMax)(nil), "airsettle.airsettle.BatchMax")
}

func init() {
	proto.RegisterFile("airsettle/airsettle/batch_max.proto", fileDescriptor_48892b9c04061d64)
}

var fileDescriptor_48892b9c04061d64 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x3d, 0x4e, 0xc3, 0x30,
	0x18, 0xad, 0x4b, 0xe9, 0x8f, 0x11, 0x0c, 0x66, 0xb1, 0x18, 0xac, 0x0a, 0x10, 0xea, 0x42, 0x18,
	0x58, 0x98, 0x3b, 0xc1, 0x50, 0x84, 0x82, 0xc4, 0xc0, 0x82, 0x9c, 0xf4, 0x2b, 0xb1, 0xd2, 0xc4,
	0x91, 0xed, 0xb4, 0x81, 0x53, 0x70, 0x20, 0x0e, 0xc0, 0xd8, 0x91, 0x11, 0x25, 0x17, 0x41, 0x71,
	0x4a, 0x48, 0x10, 0xdb, 0xfb, 0xfb, 0xf4, 0x64, 0x3f, 0x7c, 0xc2, 0x85, 0xd2, 0x60, 0xcc, 0x12,
	0x2e, 0x7e, 0x91, 0xc7, 0x8d, 0x1f, 0x3c, 0x45, 0x3c, 0x73, 0x12, 0x25, 0x8d, 0x24, 0x87, 0xb5,
	0xe5, 0xd4, 0xe8, 0xf8, 0xbd, 0x8b, 0x87, 0xd3, 0x32, 0x38, 0xe3, 0x19, 0x19, 0xe3, 0x3d, 0x7b,
	0x74, 0x9b, 0x46, 0x1e, 0x28, 0x8a, 0xc6, 0x68, 0xd2, 0x73, 0x9b, 0x12, 0xa1, 0x78, 0xe0, 0x07,
	0x5c, 0xc4, 0x37, 0x73, 0xda, 0x1d, 0xa3, 0xc9, 0xc8, 0xfd, 0xa1, 0xc4, 0xc1, 0x24, 0x51, 0xb0,
	0x9a, 0x81, 0x0a, 0x97, 0xe0, 0x4a, 0x69, 0xae, 0xb9, 0x0e, 0xe8, 0x8e, 0x0d, 0xfd, 0xe3, 0x90,
	0x33, 0x7c, 0x10, 0xb5, 0xb3, 0x3d, 0x9b, 0xfd, 0xa3, 0x96, 0x8d, 0xaf, 0xe1, 0x9d, 0x92, 0x72,
	0x41, 0x77, 0xab, 0xc6, 0x2d, 0x2d, 0x9d, 0xb5, 0x30, 0x31, 0x68, 0x4d, 0xfb, 0x95, 0xb3, 0xa5,
	0xe4, 0x08, 0x0f, 0x57, 0xa0, 0xc4, 0x42, 0xc0, 0x9c, 0x0e, 0xac, 0x55, 0xf3, 0xb2, 0xd7, 0x3e,
	0xe8, 0x3e, 0xf5, 0x22, 0x61, 0x0c, 0x28, 0x3a, 0xac, 0x7a, 0xdb, 0x2a, 0x39, 0xc5, 0xfb, 0x56,
	0x79, 0xa8, 0x0e, 0x15, 0x1d, 0xd9, 0x58, 0x5b, 0x9c, 0xba, 0x1f, 0x39, 0x43, 0x9b, 0x9c, 0xa1,
	0xaf, 0x9c, 0xa1, 0xb7, 0x82, 0x75, 0x36, 0x05, 0xeb, 0x7c, 0x16, 0xac, 0xf3, 0x78, 0xf5, 0x2c,
	0x4c, 0x90, 0x7a, 0x8e, 0x2f, 0xa3, 0x72, 0x13, 0xfb, 0x4d, 0xfa, 0x3c, 0x06, 0xb3, 0x96, 0x2a,
	0x6c, 0xac, 0x94, 0x35, 0xb0, 0x79, 0x49, 0x40, 0x7b, 0x7d, 0x3b, 0xd7, 0xe5, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x86, 0xfe, 0x2d, 0xac, 0xd5, 0x01, 0x00, 0x00,
}

func (m *BatchMax) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchMax) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchMax) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchVerifier) > 0 {
		i -= len(m.BatchVerifier)
		copy(dAtA[i:], m.BatchVerifier)
		i = encodeVarintBatchMax(dAtA, i, uint64(len(m.BatchVerifier)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BatchSubmitter) > 0 {
		i -= len(m.BatchSubmitter)
		copy(dAtA[i:], m.BatchSubmitter)
		i = encodeVarintBatchMax(dAtA, i, uint64(len(m.BatchSubmitter)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Verified) > 0 {
		i -= len(m.Verified)
		copy(dAtA[i:], m.Verified)
		i = encodeVarintBatchMax(dAtA, i, uint64(len(m.Verified)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Witness) > 0 {
		i -= len(m.Witness)
		copy(dAtA[i:], m.Witness)
		i = encodeVarintBatchMax(dAtA, i, uint64(len(m.Witness)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ZkProof) > 0 {
		i -= len(m.ZkProof)
		copy(dAtA[i:], m.ZkProof)
		i = encodeVarintBatchMax(dAtA, i, uint64(len(m.ZkProof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MerkleRootHash) > 0 {
		i -= len(m.MerkleRootHash)
		copy(dAtA[i:], m.MerkleRootHash)
		i = encodeVarintBatchMax(dAtA, i, uint64(len(m.MerkleRootHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrevMerkleRootHash) > 0 {
		i -= len(m.PrevMerkleRootHash)
		copy(dAtA[i:], m.PrevMerkleRootHash)
		i = encodeVarintBatchMax(dAtA, i, uint64(len(m.PrevMerkleRootHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintBatchMax(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.BatchNumber != 0 {
		i = encodeVarintBatchMax(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBatchMax(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatchMax(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BatchMax) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovBatchMax(uint64(m.BatchNumber))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovBatchMax(uint64(l))
	}
	l = len(m.PrevMerkleRootHash)
	if l > 0 {
		n += 1 + l + sovBatchMax(uint64(l))
	}
	l = len(m.MerkleRootHash)
	if l > 0 {
		n += 1 + l + sovBatchMax(uint64(l))
	}
	l = len(m.ZkProof)
	if l > 0 {
		n += 1 + l + sovBatchMax(uint64(l))
	}
	l = len(m.Witness)
	if l > 0 {
		n += 1 + l + sovBatchMax(uint64(l))
	}
	l = len(m.Verified)
	if l > 0 {
		n += 1 + l + sovBatchMax(uint64(l))
	}
	l = len(m.BatchSubmitter)
	if l > 0 {
		n += 1 + l + sovBatchMax(uint64(l))
	}
	l = len(m.BatchVerifier)
	if l > 0 {
		n += 1 + l + sovBatchMax(uint64(l))
	}
	return n
}

func sovBatchMax(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBatchMax(x uint64) (n int) {
	return sovBatchMax(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BatchMax) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatchMax
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchMax: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchMax: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchMax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchMax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevMerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchMax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchMax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevMerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchMax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchMax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkProof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchMax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchMax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZkProof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Witness", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchMax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchMax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Witness = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchMax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchMax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verified = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSubmitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchMax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchMax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchSubmitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchVerifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatchMax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatchMax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchVerifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatchMax(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatchMax
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatchMax(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatchMax
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatchMax
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatchMax
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBatchMax
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBatchMax
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBatchMax        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatchMax          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBatchMax = fmt.Errorf("proto: unexpected end of group")
)
